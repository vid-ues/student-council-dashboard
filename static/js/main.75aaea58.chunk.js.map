{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["styles","app","fontFamily","maxWidth","margin","padding","header","backgroundColor","color","textAlign","marginBottom","questionsContainer","display","flexDirection","gap","questionCard","border","borderRadius","overflow","questionHeader","cursor","justifyContent","alignItems","questionTitle","fontSize","responsesDetails","responseItem","errorMessage","fontWeight","QuestionResponseDisplay","questions","setQuestions","useState","responses","setResponses","expandedQuestion","setExpandedQuestion","error","setError","useEffect","fetch","then","response","json","data","message","values","length","headers","rows","responseData","forEach","question","index","map","row","catch","console","React","createElement","style","key","onClick","toggleExpand","respIndex","App","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.75aaea58.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst styles = {\n  app: {\n    fontFamily: 'Arial, sans-serif',\n    maxWidth: '800px',\n    margin: '0 auto',\n    padding: '20px',\n  },\n  header: {\n    backgroundColor: '#282c34',\n    padding: '20px',\n    color: 'white',\n    textAlign: 'center',\n    marginBottom: '20px',\n  },\n  questionsContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '15px',\n  },\n  questionCard: {\n    border: '1px solid #ddd',\n    borderRadius: '8px',\n    overflow: 'hidden',\n  },\n  questionHeader: {\n    backgroundColor: '#f0f0f0',\n    padding: '15px',\n    cursor: 'pointer',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  questionTitle: {\n    margin: 0,\n    fontSize: '18px',\n  },\n  responsesDetails: {\n    padding: '15px',\n  },\n  responseItem: {\n    marginBottom: '10px',\n    padding: '10px',\n    backgroundColor: '#f9f9f9',\n    borderRadius: '4px',\n  },\n  errorMessage: {\n    color: 'red',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    padding: '20px',\n  },\n};\n\nconst QuestionResponseDisplay = () => {\n  const [questions, setQuestions] = useState([]);\n  const [responses, setResponses] = useState({});\n  const [expandedQuestion, setExpandedQuestion] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const SHEET_ID = '1b6PKIXGqHTFEsU3wiObNe7cSfzNvQMLmGNqiGtBBB5c';\n    const API_KEY = 'AIzaSyBSm0APazfjqdqSvpiMQA63NUviz3Qz0FU';\n    const SHEET_NAME = 'Form Responses 1';\n    const range = `${SHEET_NAME}!F:AG`;\n    const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${range}?key=${API_KEY}`;\n\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          setError(`API Error: ${data.error.message}`);\n          return;\n        }\n        if (!data.values || data.values.length < 2) {\n          setError('No data found or insufficient data');\n          return;\n        }\n        const [headers, ...rows] = data.values;\n        setQuestions(headers);\n        const responseData = {};\n        headers.forEach((question, index) => {\n          responseData[question] = rows.map(row => row[index] || 'No response');\n        });\n        setResponses(responseData);\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n        setError(`Fetch error: ${error.message}`);\n      });\n  }, []);\n\n  const toggleExpand = (question) => {\n    setExpandedQuestion(expandedQuestion === question ? null : question);\n  };\n\n  if (error) {\n    return <div style={styles.errorMessage}>{error}</div>;\n  }\n\n  return (\n    <div style={styles.questionsContainer}>\n      {questions.length === 0 ? (\n        <div>Loading...</div>\n      ) : (\n        questions.map((question, index) => (\n          <div key={index} style={styles.questionCard}>\n            <div \n              style={styles.questionHeader}\n              onClick={() => toggleExpand(question)}\n            >\n              <h3 style={styles.questionTitle}>{question}</h3>\n              <span>{expandedQuestion === question ? '▲' : '▼'}</span>\n            </div>\n            {expandedQuestion === question && (\n              <div style={styles.responsesDetails}>\n                {responses[question].map((response, respIndex) => (\n                  <div key={respIndex} style={styles.responseItem}>\n                    <p>Response {respIndex + 1}: {response}</p>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div style={styles.app}>\n      <header style={styles.header}>\n        <h1>Student Council Survey Questions</h1>\n      </header>\n      <main>\n        <QuestionResponseDisplay />\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}