{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["LongFormResponseDisplay","responses","setResponses","useState","expandedIndex","setExpandedIndex","useEffect","fetch","then","response","json","data","headers","rows","values","formattedResponses","map","row","reduce","acc","header","index","catch","error","console","React","createElement","className","key","onClick","toggleExpand","Object","entries","_ref","qIndex","question","answer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"mNAEA,MAAMA,EAA0BA,KAC9B,MAAOC,EAAWC,GAAgBC,mBAAS,KACpCC,EAAeC,GAAoBF,mBAAS,MAEnDG,oBAAU,KAMRC,MAAM,wKACHC,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,IACJ,MAAOC,KAAYC,GAAQF,EAAKG,OAC1BC,EAAqBF,EAAKG,IAAIC,GAC3BL,EAAQM,OAAO,CAACC,EAAKC,EAAQC,KAClCF,EAAIC,GAAUH,EAAII,GACXF,GACN,KAELjB,EAAaa,KAEdO,MAAMC,GAASC,QAAQD,MAAM,uBAAwBA,KACvD,IAMH,OACEE,IAAAC,cAAA,OAAKC,UAAU,aACZ1B,EAAUe,IAAI,CAACP,EAAUY,IACxBI,IAAAC,cAAA,OAAKE,IAAKP,EAAOM,UAAU,yCACzBF,IAAAC,cAAA,OACEC,UAAU,mDACVE,QAASA,IAVGR,KACpBhB,EAAiBD,IAAkBiB,EAAQ,KAAOA,IAS3BS,CAAaT,IAE5BI,IAAAC,cAAA,MAAIC,UAAU,yBAAwB,YAAUN,EAAQ,GACxDI,IAAAC,cAAA,YAAOtB,IAAkBiB,EAAQ,SAAM,WAExCjB,IAAkBiB,GACjBI,IAAAC,cAAA,OAAKC,UAAU,kBACZI,OAAOC,QAAQvB,GAAUO,IAAI,CAAAiB,EAAqBC,KAAM,IAAzBC,EAAUC,GAAOH,EAAA,OAC/CR,IAAAC,cAAA,OAAKE,IAAKM,GACRT,IAAAC,cAAA,KAAGC,UAAU,eAAeQ,GAC5BV,IAAAC,cAAA,KAAGC,UAAU,iBAAiBS,WAoBjCC,MATf,WACE,OACEZ,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,oCACJD,IAAAC,cAAC1B,EAAuB,QClDfsC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,KAAKyB,IAAkD,IAAjD,OAAEQ,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASZ,EACpEQ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,MCDDO,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzB,IAAAC,cAACD,IAAM0B,WAAU,KACf1B,IAAAC,cAACW,EAAG,QAORC,K","file":"static/js/main.fce7b037.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst LongFormResponseDisplay = () => {\n  const [responses, setResponses] = useState([]);\n  const [expandedIndex, setExpandedIndex] = useState(null);\n\n  useEffect(() => {\n    const SHEET_ID = '1b6PKIXGqHTFEsU3wiObNe7cSfzNvQMLmGNqiGtBBB5c';\n    const API_KEY = 'AIzaSyBSm0APazfjqdqSvpiMQA63NUviz3Qz0FU';\n    const SHEET_NAME = 'Form Responses 1';\n    const range = `${SHEET_NAME}!F1:AG`;\n\n    fetch(`https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${range}?key=${API_KEY}`)\n      .then(response => response.json())\n      .then(data => {\n        const [headers, ...rows] = data.values;\n        const formattedResponses = rows.map(row => {\n          return headers.reduce((acc, header, index) => {\n            acc[header] = row[index];\n            return acc;\n          }, {});\n        });\n        setResponses(formattedResponses);\n      })\n      .catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  const toggleExpand = (index) => {\n    setExpandedIndex(expandedIndex === index ? null : index);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {responses.map((response, index) => (\n        <div key={index} className=\"border rounded-lg p-4 bg-white shadow\">\n          <div \n            className=\"flex justify-between items-center cursor-pointer\" \n            onClick={() => toggleExpand(index)}\n          >\n            <h3 className=\"font-semibold text-lg\">Response {index + 1}</h3>\n            <span>{expandedIndex === index ? '▲' : '▼'}</span>\n          </div>\n          {expandedIndex === index && (\n            <div className=\"mt-2 space-y-2\">\n              {Object.entries(response).map(([question, answer], qIndex) => (\n                <div key={qIndex}>\n                  <p className=\"font-medium\">{question}</p>\n                  <p className=\"text-gray-600\">{answer}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Student Council Survey Responses</h1>\n      <LongFormResponseDisplay />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}