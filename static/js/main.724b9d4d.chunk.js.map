{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["styles","app","fontFamily","maxWidth","margin","padding","header","backgroundColor","color","textAlign","marginBottom","questionsContainer","display","flexDirection","gap","groupHeader","marginTop","borderRadius","questionCard","border","overflow","questionHeader","cursor","justifyContent","alignItems","questionTitle","fontSize","responsesDetails","responseItem","errorMessage","fontWeight","QuestionResponseDisplay","console","log","questionGroups","setQuestionGroups","useState","expandedQuestion","setExpandedQuestion","error","setError","useEffect","fetch","then","response","json","data","message","values","length","headers","rows","groups","slice","responseData","forEach","question","index","responsesForQuestion","map","row","filter","responses","catch","React","createElement","style","Object","entries","_ref","groupName","questions","key","onClick","toggleExpand","respIndex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.724b9d4d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst styles = {\n  app: {\n    fontFamily: 'Arial, sans-serif',\n    maxWidth: '800px',\n    margin: '0 auto',\n    padding: '20px',\n  },\n  header: {\n    backgroundColor: '#282c34',\n    padding: '20px',\n    color: 'white',\n    textAlign: 'center',\n    marginBottom: '20px',\n  },\n  questionsContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '15px',\n  },\n  groupHeader: {\n    backgroundColor: '#4a4a4a',\n    color: 'white',\n    padding: '10px',\n    marginTop: '20px',\n    marginBottom: '10px',\n    borderRadius: '5px',\n  },\n  questionCard: {\n    border: '1px solid #ddd',\n    borderRadius: '8px',\n    overflow: 'hidden',\n  },\n  questionHeader: {\n    backgroundColor: '#f0f0f0',\n    padding: '15px',\n    cursor: 'pointer',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  questionTitle: {\n    margin: 0,\n    fontSize: '18px',\n  },\n  responsesDetails: {\n    padding: '15px',\n  },\n  responseItem: {\n    marginBottom: '10px',\n    padding: '10px',\n    backgroundColor: '#f9f9f9',\n    borderRadius: '4px',\n  },\n  errorMessage: {\n    color: 'red',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    padding: '20px',\n  },\n};\n\nconst QuestionResponseDisplay = () => {\n  console.log(\"Component is rendering...\");  // Log to verify if the component renders\n\n  const [questionGroups, setQuestionGroups] = useState({});\n  const [expandedQuestion, setExpandedQuestion] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    console.log(\"useEffect is running...\");  // Log when useEffect runs\n\n    const SHEET_ID = '1b6PKIXGqHTFEsU3wiObNe7cSfzNvQMLmGNqiGtBBB5c';\n    const API_KEY = 'AIzaSyBSm0APazfjqdqSvpiMQA63NUviz3Qz0FU';\n    const SHEET_NAME = 'Form Responses 1';\n    const range = `${SHEET_NAME}!F:AG`;\n    const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${range}?key=${API_KEY}`;\n\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        console.log(\"Fetched data:\", data);  // Log the full data object\n\n        if (data.error) {\n          setError(`API Error: ${data.error.message}`);\n          return;\n        }\n\n        if (!data.values || data.values.length < 2) {\n          setError('No data found or insufficient data');\n          return;\n        }\n\n        const [headers, ...rows] = data.values;\n        console.log(\"Headers:\", headers);  // Log the headers (questions)\n        console.log(\"Rows:\", rows);  // Log the rows (responses)\n\n        const groups = {\n          \"General Questions Set 1\": headers.slice(0, 7),\n          \"Student Body President\": headers.slice(10, 13),\n          \"Student Body Vice President\": headers.slice(13, 16),\n          \"Student Body Secretary\": headers.slice(16, 19),\n          \"Student Body Treasurer\": headers.slice(19, 22),\n          \"Student Body Speaker\": headers.slice(22, 25),\n          \"General Questions Set 2\": headers.slice(25)\n        };\n\n        const responseData = {};\n\n        headers.forEach((question, index) => {\n          const responsesForQuestion = rows\n            .map(row => row[index] || '')\n            .filter(response => response !== '');\n\n          console.log(`Question: ${question}, Responses:`, responsesForQuestion);\n\n          responseData[question] = responsesForQuestion;\n        });\n\n        setQuestionGroups({ groups, responses: responseData });\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n        setError(`Fetch error: ${error.message}`);\n      });\n  }, []);\n\n  const toggleExpand = (question) => {\n    setExpandedQuestion(expandedQuestion === question ? null : question);\n  };\n\n  if (error) {\n    return <div style={styles.errorMessage}>{error}</div>;\n  }\n\n  return (\n    <div style={styles.questionsContainer}>\n      {Object.entries(questionGroups.groups || {}).map(([groupName, questions]) => (\n        <div key={groupName}>\n          <h2 style={styles.groupHeader}>{groupName}</h2>\n          {questions.map((question, index) => (\n            <div key={index} style={styles.questionCard}>\n              <div\n                style={styles.questionHeader}\n                onClick={() => toggleExpand(question)}\n              >\n                <h3 style={styles.questionTitle}>{question}</h3>\n                <span>{expandedQuestion === question ? '▲' : '▼'}</span>\n              </div>\n              {expandedQuestion === question && questionGroups.responses && (\n                <div style={styles.responsesDetails}>\n                  {questionGroups.responses[question].length > 0 ? (\n                    questionGroups.responses[question].map((response, respIndex) => (\n                      <div key={respIndex} style={styles.responseItem}>\n                        <p>Response {respIndex + 1}: {response}</p>\n                      </div>\n                    ))\n                  ) : (\n                    <p>No responses available for this question.</p>\n                  )}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nfunction App() {\n  console.log(\"App component is rendering...\");  // Log to ensure App component renders\n  return (\n    <div style={styles.app}>\n      <header style={styles.header}>\n        <h1>Student Council Survey Questions</h1>\n      </header>\n      <main>\n        <QuestionResponseDisplay />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}