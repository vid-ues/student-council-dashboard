{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["LongFormResponseDisplay","responses","setResponses","useState","expandedIndex","setExpandedIndex","error","setError","useEffect","fetch","then","response","json","data","message","values","length","headers","rows","formattedResponses","map","row","reduce","acc","header","index","catch","console","React","createElement","className","key","onClick","toggleExpand","Object","entries","_ref","qIndex","question","answer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"8OAGA,MAAMA,EAA0BA,KAC9B,MAAOC,EAAWC,GAAgBC,mBAAS,KACpCC,EAAeC,GAAoBF,mBAAS,OAC5CG,EAAOC,GAAYJ,mBAAS,MAEnCK,oBAAU,KAMRC,MAAM,wKACHC,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,IACJ,GAAIA,EAAKP,MAEP,YADAC,EAAS,cAAcM,EAAKP,MAAMQ,SAGpC,IAAKD,EAAKE,QAAUF,EAAKE,OAAOC,OAAS,EAEvC,YADAT,EAAS,sCAGX,MAAOU,KAAYC,GAAQL,EAAKE,OAC1BI,EAAqBD,EAAKE,IAAIC,GAC3BJ,EAAQK,OAAO,CAACC,EAAKC,EAAQC,KAClCF,EAAIC,GAAUH,EAAII,IAAU,cACrBF,GACN,KAELrB,EAAaiB,KAEdO,MAAMpB,IACLqB,QAAQrB,MAAM,uBAAwBA,GACtCC,EAAS,gBAAgBD,EAAMQ,YAElC,IAMH,OAAIR,EACKsB,IAAAC,cAAA,OAAKC,UAAU,iBAAiBxB,GAIvCsB,IAAAC,cAAA,OAAKC,UAAU,uBACS,IAArB7B,EAAUe,OACTY,IAAAC,cAAA,WAAK,cAEL5B,EAAUmB,IAAI,CAACT,EAAUc,IACvBG,IAAAC,cAAA,OAAKE,IAAKN,EAAOK,UAAU,iBACzBF,IAAAC,cAAA,OACEC,UAAU,kBACVE,QAASA,IAjBCP,KACpBpB,EAAiBD,IAAkBqB,EAAQ,KAAOA,IAgBzBQ,CAAaR,IAE5BG,IAAAC,cAAA,UAAI,YAAUJ,EAAQ,GACtBG,IAAAC,cAAA,YAAOzB,IAAkBqB,EAAQ,SAAM,WAExCrB,IAAkBqB,GACjBG,IAAAC,cAAA,OAAKC,UAAU,oBACZI,OAAOC,QAAQxB,GAAUS,IAAI,CAAAgB,EAAqBC,KAAM,IAAzBC,EAAUC,GAAOH,EAAA,OAC/CR,IAAAC,cAAA,OAAKE,IAAKM,EAAQP,UAAU,WAC1BF,IAAAC,cAAA,KAAGC,UAAU,YAAYQ,GACzBV,IAAAC,cAAA,KAAGC,UAAU,UAAUS,WAyB5BC,MAbf,WACE,OACEZ,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAQC,UAAU,cAChBF,IAAAC,cAAA,UAAI,qCAEND,IAAAC,cAAA,YACED,IAAAC,cAAC7B,EAAuB,SC1EjByC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,KAAK0B,IAAkD,IAAjD,OAAEQ,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASZ,EACpEQ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,MCDDO,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzB,IAAAC,cAACD,IAAM0B,WAAU,KACf1B,IAAAC,cAACW,EAAG,QAORC,K","file":"static/js/main.3c2d63ee.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst LongFormResponseDisplay = () => {\n  const [responses, setResponses] = useState([]);\n  const [expandedIndex, setExpandedIndex] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const SHEET_ID = '1b6PKIXGqHTFEsU3wiObNe7cSfzNvQMLmGNqiGtBBB5c';\n    const API_KEY = 'AIzaSyBSm0APazfjqdqSvpiMQA63NUviz3Qz0FU';\n    const SHEET_NAME = 'Form Responses 1';\n    const range = `${SHEET_NAME}!F1:AG`;\n\n    fetch(`https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${range}?key=${API_KEY}`)\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          setError(`API Error: ${data.error.message}`);\n          return;\n        }\n        if (!data.values || data.values.length < 2) {\n          setError('No data found or insufficient data');\n          return;\n        }\n        const [headers, ...rows] = data.values;\n        const formattedResponses = rows.map(row => {\n          return headers.reduce((acc, header, index) => {\n            acc[header] = row[index] || 'No response';\n            return acc;\n          }, {});\n        });\n        setResponses(formattedResponses);\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n        setError(`Fetch error: ${error.message}`);\n      });\n  }, []);\n\n  const toggleExpand = (index) => {\n    setExpandedIndex(expandedIndex === index ? null : index);\n  };\n\n  if (error) {\n    return <div className=\"error-message\">{error}</div>;\n  }\n\n  return (\n    <div className=\"responses-container\">\n      {responses.length === 0 ? (\n        <div>Loading...</div>\n      ) : (\n        responses.map((response, index) => (\n          <div key={index} className=\"response-card\">\n            <div \n              className=\"response-header\"\n              onClick={() => toggleExpand(index)}\n            >\n              <h3>Response {index + 1}</h3>\n              <span>{expandedIndex === index ? '▲' : '▼'}</span>\n            </div>\n            {expandedIndex === index && (\n              <div className=\"response-details\">\n                {Object.entries(response).map(([question, answer], qIndex) => (\n                  <div key={qIndex} className=\"qa-pair\">\n                    <p className=\"question\">{question}</p>\n                    <p className=\"answer\">{answer}</p>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Student Council Survey Responses</h1>\n      </header>\n      <main>\n        <LongFormResponseDisplay />\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}